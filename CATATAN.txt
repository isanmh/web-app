# cara membuat authorization & authentication :
- laravel/ui (untuk vue, react, bootstrap)
- breeze (tailwind css)
- jetstream (livewire, vue, inertia)
- fortify

# Cara Install laravel UI bootstrap :
1. composer require laravel/ui
2. php artisan ui bootstrap --auth
3. npm install && npm run dev

======Secure Coding Laravel======
# Validation Laravel File :
store :
$request->validate([
    'name' => 'required|string|max:255',
    'price' => 'required|integer',
    'image' => 'image|required|mimes:png,jpg,svg,jpeg|max:2048'
]);

update :
$request->validate([
    'name' => 'string|max:255',
    'price' => 'integer',
    'image' => 'image|mimes:png,jpg,svg,jpeg|max:2048'
]);

# use Symlink Laravel Storage :
php artisan storage:link

- Store Image :
if ($image = $request->file('image')) {
    $targetPath = 'assets/images/';
    $product_img = date('YmdHis') . "." . $image->getClientOriginalExtension();
    $image->storeAs($targetPath, $product_img, 'public');
    $input['image'] = "$product_img";
}

- Update Image :
// unlink storage link
if ($product->image) {
    unlink(storage_path('app/public/assets/images/' . $product->image));
}

// store image
$image->storeAs('assets/images', $product_img, 'public');

- view image :
<img src="{{ Storage::url('public/assets/images/' . $item->image) }}" alt="{{ $item->image }}" height="50">


# Use soft delete :
- add in model :
use SoftDeletes;

- add in migration :
$table->softDeletes();

# Use Mass Assignment :
- add in model :
protected $fillable = ['name', 'price', 'image'];

# Use paginate Laravel :
# ProductController.php :
$products = Product::latest()->paginate(2);

# view/index.blade.php :
<th class="align-middle">{{ $products->firstItem() + $loop->index }}</th>
-- table content --
{{ $products->links() }}

# App Service Provider :
Paginator::useBootstrap();

==== Optimizations Laravel ====
- Productions Mode :
1. composer install --optimize-autoloader --no-dev
2. gunakan optimize :
php artisan optimize
3. env :
APP_ENV=production
APP_DEBUG=false

4. Install Laravel Octane :
composer require laravel/octane
php artisan octane:install
php artisan octane:start

5. install pest laravel :
composer remove phpunit/phpunit
composer require pestphp/pest --dev --with-all-dependencies

./vendor/bin/pest --init
./vendor/bin/pest

composer require pestphp/pest-plugin-stressless --dev

stress test :
./vendor/bin/pest stress pestphp.com
./vendor/bin/pest stress http://127.0.0.1:8000
./vendor/bin/pest stress http://127.0.0.1:8000 --concurrency=2
./vendor/bin/pest stress http://127.0.0.1:8000 --concurrency=10 --requests=100

# StressTest.php
<?php

use function Pest\Stressless\stress;

test('landing page', function () {
    $result = stress('http://localhost:8000', 100, 10)
        ->concurrency(5)
        ->for(10)->seconds()
        ->dump();

    expect($result->requests->failed->count)->toBe(0);
    expect($result->requests->duration->med)->toBeLessThan(130);
});


==========Custome Header For API==========
# membuat middleware custom :
    php artisan make:middleware CustomHeader
# setting CustomHeader.php :
    authController.php
    public const header = [
        'X-PARTNER-ID' => '123',
        'X-EXTERNAL-ID' => '123',
        'X-SIGNATURE' => '123',
        'X-TIMESTAMP' => '123',
    ];

    CustomHeader.php
    public function handle(Request $request, Closure $next): Response
    {
        $ah = AuthController::header;
        $res1 = $request->header('X-PARTNER-ID');
        $res2 = $request->header('X-EXTERNAL-ID');
        $res3 = $request->header('X-SIGNATURE');
        $res4 = $request->header('X-TIMESTAMP');

        if (
            $res1 === $ah['X-PARTNER-ID'] &&
            $res2 === $ah['X-EXTERNAL-ID'] &&
            $res3 === $ah['X-SIGNATURE'] &&
            $res4 === $ah['X-TIMESTAMP']
        ) {
            return $next($request);
        } else {
            return response()->json(
                [
                    'status' => 503,
                    'error' => "Silahkan isi header dengan benar"
                ]
            );
        }
    }

# setting middleware di kernel.php :
    protected $middlewareAliases = [
        // custom header
        "snap-bi" => CustomHeader::class,
    ];

# setting route :
    Route::middleware(['auth:sanctum', 'snap-bi'])->group(function () {
        Route::get('product', [ProductApiController::class, 'index']);
    });
    atau
    Route::get('product', [ProductApiController::class, 'index'])->middleware('snap-bi');
